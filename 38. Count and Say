/**
The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. 
Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.

Given a positive integer n, return the nth term of the count-and-say sequence.

Example 1:
Input: n = 1
Output: "1"
Explanation: This is the base case.

Example 2:
Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"
*/

#solution
class Solution {
    public String countAndSay(int n) {
        String r = "1";
        for(int i=1;i<n;i++){
            int ct = 0;
            char d =r.charAt(0);
            int ind =0;
            StringBuilder res = new StringBuilder();
            while(ind<r.length()){
                if(r.charAt(ind)!=d){
                    res.append(ct);
                    res.append(d);
                    ct=0;
                    d=r.charAt(ind);
                }
                ind++;
                ct++;
            }
            res.append(ct);
            res.append(d);
            r=res.toString();
        }
        return r;
    }
}

#recursion
class Solution {
    public String countAndSay(int n) {
        if(n==1){
            return "1";
        }
        return say(countAndSay(n-1));
    }

    private String say(String r){
        int ct = 0;
        char d =r.charAt(0);
        int ind =0;
        String res = "";
        while(ind<r.length()){
            if(r.charAt(ind)!=d){
                res+=ct;
                res+=d;
                ct=0;
                d=r.charAt(ind);
            }
            ct++;
            ind++;
        }
        res+=ct;
        res+=d;
        return res;
    }
}

#fasteest
class Solution {
    public String countAndSay(int n) {
        String[] result = new String[n];
        result[0] = "1";
        for(int i=1; i<n; i++){
            result[i] = countAndSayOutput(result[i-1].toCharArray());
        }
        return result[n-1];
    }

    // Convert a string into it's countAndSay representation
    // We should send char array as input and StringBuilder to form as both are faster than directly dealing with Strings
    private String countAndSayOutput(char[] s){
        int count = 1;
        char c = s[0];
        StringBuilder sb = new StringBuilder(); 
        for(int i=1; i<s.length; i++){
            if(s[i]==c){
                count++;
            } else {
                
                sb.append(count);
                sb.append(c);
                c = s[i];
                count = 1; 
            }
        }
        sb.append(count);
        sb.append(c);
        return sb.toString(); 
    }
}
