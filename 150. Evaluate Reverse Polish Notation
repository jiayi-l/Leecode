/**
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.

Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 
Example 1:
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
*/

#solution
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> digit = new Stack<>();
         int result = 0;
         for(String token : tokens){
            if(isNumeric(token)){
               digit.push(Integer.valueOf(token));
            }else{
               switch (token) {
                  case "+" -> {
                     Integer int2 = digit.pop();
                     Integer int1 = digit.pop();
                     Integer res = int1 + int2;
                     digit.push(res);
                  }
                  case "-" -> {
                     Integer int2 = digit.pop();
                     Integer int1 = digit.pop();
                     Integer res = int1 - int2;
                     digit.push(res);
                  }
                  case "*" -> {
                     Integer int2 = digit.pop();
                     Integer int1 = digit.pop();
                     Integer res = int1 * int2;
                     digit.push(res);
                  }
                  case "/" -> {
                     Integer int2 = digit.pop();
                     Integer int1 = digit.pop();
                     Integer res = int1 / int2;
                     digit.push(res);
                  }
               }
            }
         }
         result = digit.pop();
         return result;
    }

    private static boolean isNumeric(String str){
        for (int i = str.length()-1;i>0;i--){
            if (!Character.isDigit(str.charAt(i))){
                return false;
            }
        }
        if(!Character.isDigit(str.charAt(0)) && !(str.length()>1 &&str.charAt(0)=='-')){
            return false;
        }
        return true;
    }
}

#cleaner
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        String symbol = "+-*/";
        for(String token: tokens) {
            if(token.length() == 1 && symbol.indexOf(token.charAt(0)) >= 0) {
                int a = stack.pop(), b = stack.pop(), c = 0;
                switch(token.charAt(0)){
                    case '+':
                    c = a + b;
                    break;
                    case '-':
                    c = b - a;
                    break;
                    case '*':
                    c = a * b;
                    break;
                    case '/':
                    c = b / a;
                }
                stack.push(c);
            }else stack.push(Integer.valueOf(token));
        }
        return stack.pop();
    }
}
