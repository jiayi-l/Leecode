/**
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
*/

#solution
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> sub = new ArrayList<>();
        sum(candidates, target, sub, res, 0);
        return res;
    }
    public void sum(int[] candidates,int target, List<Integer>sub,List<List<Integer>> res, int index){
        if(target ==0){
            if(!res.contains(sub)){
                res.add(new ArrayList<>(sub));   
            }
            return;
        }
        if(target<0 || index>=candidates.length){
            return;
        }
        sub.add(candidates[index]);
        sum(candidates,target-candidates[index],sub,res,index+1);
        sub.remove(sub.size()-1);
        while(index<candidates.length-1 && candidates[index]==candidates[index+1]){
            index++;
        }
        sum(candidates,target,sub,res,index+1);
    }
}

#faster
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        Arrays.sort(candidates);
        findCombinations(0,candidates,target,ans,new ArrayList());
        return ans;
    }
    private void findCombinations(int ind, int[] arr, int target, List<List<Integer>> ans, List<Integer> ds) {
        if(target == 0) {
            ans.add(new ArrayList<>(ds)); 
            return; 
        }
        
        for(int i = ind; i < arr.length;i++) {
            if(i > ind && arr[i] == arr[i-1]) continue; 
            if(arr[i]>target) break; 
            
            ds.add(arr[i]); 
            findCombinations(i+1, arr, target - arr[i], ans, ds); 
            ds.remove(ds.size() - 1); 
        }
    }
}
