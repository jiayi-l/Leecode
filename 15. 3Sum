/**
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
*/

#solution
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> set = new ArrayList<>(3);
        set.add(0);
        set.add(0);
        set.add(0);
        Arrays.sort(nums);
        //we first set i value as static, and then move j and k index
        for(int i =0;i<nums.length-2;i++){
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int k=nums.length-1;
            int j=i+1;
            while(j<k){
                int results = nums[i]+nums[j]+nums[k];
                if(results==0){
                    result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                 
                    while (j < k && nums[j] == nums[j + 1]) { 
                        //to avoid we have the same value
                        j++;
                    }

                    // Skip duplicate elements for k
                    while (j < k && nums[k] == nums[k - 1]) {
                        k--;
                    }
                    //move the index when nums[j] != nums[j + 1] and nums[k] != nums[k - 1]
                    j++;
                    k--;
                    //break;
                }else if(results>0){
                    k--;
                }else{
                    j++;
                }
            }
            
        }
        return result;
    }
}
