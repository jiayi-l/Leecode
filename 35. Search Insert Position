/**
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
*/

#solution
class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;

        while(low<=high){
            int mid = (low+high)/2;
            System.out.println(mid);
            if(target==nums[mid]){
                return mid;
            }
            if(target>nums[mid]){
                low = mid+1;
            }else{
                high=mid-1;
            }
        }
        //if high move to the left of low, target is smaller than low, add to the position of low
        //if low move to the right of high, target is larger than high, add target to the right of high (low)
        return low;
    }
}
