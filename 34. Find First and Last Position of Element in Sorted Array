/**
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
*/

#solution
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int l =0;
        int h = nums.length-1;
        int start = -1;
        int end = -1;
        while(l<=h){
            if(nums[l]==target){start = l;}
            if(nums[h]==target){end = h;}
            int mid = (l+h)/2;
            if(nums[mid]==target){
                if(start ==-1){
                  start = mid;  
                }
                if(end ==-1){
                   end = mid; 
                }
                break;
            }else if(nums[mid]<target){
                l = mid+1;
            }else{
                h = mid-1;
            }
        }
        if(start ==-1 && end ==-1){return new int[]{-1,-1};}
        if(start>=1 && nums[start-1]==target){
            l = start/2;
            while(l<start){
                if(nums[l]==target){
                    start = l;
                    l = start/2;
                }else{
                    l++;
                }
            }
        }
        if(end<nums.length-1 && nums[end+1]==target){
            h = (nums.length-1+end)/2;
            while(h>end){
                if(nums[h]==target){
                    end = h;
                    h = (nums.length-1+end)/2;
                }else{
                    h--;
                }
            }
        }
        return new int[]{start,end};
    }
}

#better & faster
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = findFirst(nums, target);
        int last = findLast(nums, target,first);
        return new int[]{first, last};
    }

    private int findFirst(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int first = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                if (mid == 0 || nums[mid - 1] != target) {
                    first = mid;
                    break;
                } else {
                    right = mid - 1;
                }
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return first;
    }

    private int findLast(int[] nums, int target, int first) {
        if(first == -1){return -1;}
        int left = first, right = nums.length - 1;
        int last = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                if (mid == nums.length - 1 || nums[mid + 1] != target) {
                    last = mid;
                    break;
                } else {
                    left = mid + 1;
                }
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return last;
    }
}
