/**
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
*/

#solution
class Solution {
    public int trap(int[] height) {
        //from right to left, if left bar >= right bar, highest change to left one, lowest also changed to that one
        //if left<right, lowest = left one
        if(height.length<=2){return 0;}
        int left = 0;
        int right = height.length-1;
        int prev = 0;
        int rain = 0;
        int bar = 0;
        while(left<right){
            while(left<right && height[left]<=prev){left++;}
            while(left<right && height[right]<=prev){right--;}
            for(int i=left;i<right;i++){
                bar =Math.min(height[left],height[right]);
                if(bar-height[i]>0){
                    int diff = bar - height[i];
                    if(height[i]<prev){
                        diff-=prev-height[i];
                    }
                    rain+=diff;
                }
            }
            prev =bar;
        }
        return rain;
    }
}

#more efficient one
public class Solution {
    public int trap(int[] h) {
        //set leftbar height = lmax, rightbar height = rmax
        int l = 0, r = h.length - 1, lmax = Integer.MIN_VALUE, rmax = Integer.MIN_VALUE, ans = 0;
        while (l < r) {
        //leftbar = max of current left height and previous leftvar height
        lmax = Math.max(lmax, h[l]);
        //rightbar = max of current right height and previous rightbar height
        rmax = Math.max(rmax, h[r]);
        //if leftbar<rightbar, we move leftbar rightwards and continuously add leftbar height - current height to the total rain drops. otherwise, same for the rightbar. 
        ans += (lmax < rmax) ? lmax - h[l++] : rmax - h[r--];
        }
        return ans;
    }
}
