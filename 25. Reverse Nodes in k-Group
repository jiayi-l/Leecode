/**
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
*/

#solution
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(0,head);
        ListNode prev = dummy;
        ListNode temp = head;
        while(temp!=null){
            ListNode pre = prev;
            ListNode first = temp;
            if(check(first,k)){
                for(int i = 0;i<k;i++){
                    ListNode second = temp.next;
                    temp.next = pre;
                    pre = temp;
                    temp = second;
                }
                prev.next= pre;
                prev = first;
                first.next = temp;
            }else{
                break;
            }
        }
        return dummy.next;
    }

    private boolean check(ListNode head, int k){
        while(k>0 && head!=null){
            head = head.next;
            k--;
        }
        if(k>0){return false;}
        return true;
    }
}

#recursion
public ListNode reverseKGroup(ListNode head, int k) {
    ListNode curr = head;
    int count = 0;
    while (curr != null && count != k) { // find the k+1 node
        curr = curr.next;
        count++;
    }
    if (count == k) { // if k+1 node is found
        curr = reverseKGroup(curr, k); // reverse list with k+1 node as head
        // head - head-pointer to direct part, 
        // curr - head-pointer to reversed part;
        while (count-- > 0) { // reverse current k-group: 
            ListNode tmp = head.next; // tmp - next head in direct part
            head.next = curr; // preappending "direct" head to the reversed list 
            curr = head; // move head of reversed part to a new node
            head = tmp; // move "direct" head to the next node in direct part
        }
        head = curr;
    }
    return head;
}
