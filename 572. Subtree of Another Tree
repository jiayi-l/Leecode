/**
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.
A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true

Example 2:
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
*/

#solution
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root==null){return false;}
        if(dfs(root,subRoot)){return true;}
        return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
    }

    public boolean dfs(TreeNode rt, TreeNode sub){
        if(rt==null && sub ==null){return true;}
        if((rt.left!= null && sub.left==null) || (rt.left== null && sub.left!=null) 
        || (rt.right!= null && sub.right==null)||(rt.right== null && sub.right!=null)){
            return false;
        }
        if(rt.val!=sub.val){return false;}
        return dfs(rt.left,sub.left) && dfs(rt.right,sub.right);
        
    }
}
