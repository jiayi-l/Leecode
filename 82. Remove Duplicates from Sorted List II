/**
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. 
Return the linked list sorted as well.

Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
Output: [2,3]
*/

#solution
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0,head);
        ListNode prev = dummy;
        ListNode temp = head;
        while(temp!=null){
            if(temp.next ==null || (temp.next!=null && temp.val!=temp.next.val)){
                prev.next = temp;
                prev = temp;
                temp=temp.next;
            }else{
                int data = temp.val;
                while(temp!=null && temp.val==data){
                    temp=temp.next;
                }
                if(temp==null){prev.next = null;}
            }
        }
        if(prev == dummy){return null;}
        return dummy.next;
    }
}
