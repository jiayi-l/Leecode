/**
Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
*/

#solution
class Solution {
    public int maxProduct(int[] nums) {
        int max = nums[0];
        int min = nums[0];
        int res = nums[0];
        for(int i=1;i<nums.length;i++){
            int tp = min;
            min= Math.min(Math.min(min*nums[i],max*nums[i]),nums[i]);
            max = Math.max(Math.max(tp*nums[i],max*nums[i]),nums[i]);
            
            if(res<max){
                res = max;
            }
        }
        return res;
    }
}
