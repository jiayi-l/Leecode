/**
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/

#solution
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));
        if (intervals.length == 1) {
            return intervals;
        }
        List<List<Integer>> item = new ArrayList<>();
        for(int i =0;i<intervals.length;i++){
            int first = intervals[i][0];
            int last = intervals[i][1];
            while(i+1<intervals.length && last>=intervals[i+1][0]){
                if(last>=intervals[i+1][0]){
                    last = Math.max(last,intervals[i+1][1]);
                }
                
                i++;
            }
            List<Integer> row = new ArrayList<>();
            row.add(first);
            row.add(last);
            item.add(row);
        }
        int[][]result = new int[item.size()][2];
        for(int i=0;i<item.size();i++){
            result[i][0]=item.get(i).get(0);
            result[i][1]=item.get(i).get(1);
        }
    return result;
    }
}
