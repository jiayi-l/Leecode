/**
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
*/

#solution
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> p = new ArrayList<>();
        List<Integer> pId = new ArrayList<>();
        permute(nums,p,pId,res);
        return res;
    }

    public void permute(int[] nums,List<Integer> p, List<Integer> pId, List<List<Integer>> res){
        if(p.size()==nums.length){
            if(!res.contains(p)){
                res.add(new ArrayList<>(p));
            }
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(pId.contains(i)){
                continue;
            }
            p.add(nums[i]);
            pId.add(i);
            permute(nums,p,pId,res);
            p.remove(p.size()-1);
            pId.remove(pId.size()-1);
        }
    }
}
