/**
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.

Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
*/

#mySolution
class Solution {
    public boolean canJump(int[] nums) {
        int end = nums.length-1;
        //e.g [2,3,1,0,0,2,4]
        //check if all the index can be reached
        //from end to start; if the previous one can get to the end (2 to 4), we change the end to 2; 
        //if previous one cannot get to the new end (0 to 2); index -1; until we have one can reach the new end; or return false
        for(int j=nums.length-1;j>=0;j--){
            if(end-j<=nums[j]){
                end = j;
            }
        }

        return end == 0;
    }
}

#other
class Solution {
    public boolean canJump(int[] nums) {
       int reachable = 0;
       for(int i = 0; i < nums.length; i ++) {
           if(i > reachable) return false;
           reachable = Math.max(reachable, i + nums[i]);
       } 
       return true;
    }
}
