/**
Merge sorted Arrays

给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n

input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
output: [1,2,2,3,5,6]
**/

#my solution:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i = 0;i<n;i++){
            nums1[i+m]=nums2[i];
        }
        Arrays.sort(nums1);
    }
}

#指针
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1= 0;
        int p2=0;
        int ps=0;
        int[] sorted = new int[m+n];
        while(p1<m || p2<n){
            if(p1==m){
                for(int j =0;j<n-p2;j++){
                    sorted[ps+j]=nums2[p2+j];
                }
                p2=n;
                }else if(p2==n){
                for(int k =0;k<m-p1;k++){
                    sorted[ps+k]=nums1[p1+k];
                }
                p1=m;
                }else if(nums1[p1]>nums2[p2]){
                sorted[ps]=nums2[p2];
                p2+=1;
            }else{
                sorted[ps]=nums1[p1];
                p1+=1;
            }
            ps+=1;
        }

        for(int i=0;i<m+n;i++){
            nums1[i]=sorted[i];
        }
    }
}

#逆向指针 -从后开始比
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1= m-1;
        int p2=n-1;
        while(p1>=0||p2>=0){
            if(p1<0){//nums1 has finished all compare, which means nums2 has some smaller int left
                for(int i = 0;i<=p2;i++){
                    nums1[i]=nums2[i]; //nums2 left are smaller, put them in the front
                }
                break;
            }else if(p2<0){//nums2 has finished compare, means nums1 has some smaller value left
                break;// do nothing. smaller value of nums1 are already in the front
            }else if(nums1[p1]<nums2[p2]){ //if nums2's value is larger, put the value to the end
                nums1[p1+p2+1]=nums2[p2];
                p2-=1; //move backwards
            }else{ // if nums1;s value is larger, put the value to the end
                nums1[p1+p2+1]=nums1[p1];
                p1-=1; //move backwards
            }
        }
    }
}
