/**
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]
*/

#solution
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode large = new ListNode(0);
        ListNode l_temp = large;
        ListNode temp = head;
        ListNode dum = new ListNode(0,head);
        ListNode prev = dum;
        while(temp!=null){
            while(temp!=null&& temp.val<x){
                prev.next = temp;
                prev = temp;
                temp = temp.next;
            }
            prev.next = null;
            while(temp!=null && temp.val>=x){
                l_temp.next = temp;
                l_temp=l_temp.next;
                temp=temp.next;
            }
            l_temp.next=null;
        }
        prev.next = large.next;

        return dum.next;
    }
}

#faster O(N)
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode large = new ListNode(0);
        ListNode l_temp = large;
        ListNode temp = head;
        ListNode dum = new ListNode(0,head);
        ListNode prev = dum;
        while(temp!=null){
            if(temp.val<x){
                prev.next = temp;
                prev = temp;
            }else{
                l_temp.next = temp;
                l_temp=l_temp.next;
            }
            temp=temp.next;
        }
        l_temp.next = null;
        prev.next = large.next;

        return dum.next;
    }
}
