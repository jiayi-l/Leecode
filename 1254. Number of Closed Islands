/**
Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.
Return the number of closed islands.
 
Example 1:
Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).

Example 2:
Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1

Example 3:
Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
*/

#solution
class Solution {
    public int closedIsland(int[][] grid) {
        int island =0;
        //first make all outer 0 to 1
        for(int j=0;j<grid[0].length;j++){
            helper(grid,0,j);
            helper(grid,grid.length-1,j);
        }
        for(int i=0;i<grid.length;i++){
            helper(grid,i,0);
            helper(grid,i,grid[0].length-1);
        }

        for(int i=1;i<grid.length;i++){
            for(int j=1;j<grid[0].length;j++){
                if(grid[i][j]==0){
                    island++;
                    helper(grid,i,j);
                }
            }
        }
        return island;
    }

    public void helper(int[][] grid, int r, int c){
        if(r<0 ||r>=grid.length||c<0||c>=grid[0].length||grid[r][c]==1){return;}
        if(grid[r][c]==0){
            grid[r][c]=1;
        }
        helper(grid,r+1,c);
        helper(grid,r,c+1);
        helper(grid,r-1,c);
        helper(grid,r,c-1);
        return;
    }
}
