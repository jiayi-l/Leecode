/**
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
*/

#solution
class Solution {
    public int maxProfit(int[] prices) {
        int l = prices.length;
        int max = 0;
        int profit =0;
        int buy = 0;
        
        if(l==1){
            return 0;
        }
        
        //compare buy price with the current price, so that we have the lower one. 
        // in case we have a lower price later, but no hight sell price, which may not maximize the profit, we use max function to make each profit to compare with the previous max profit. 
        for(int i=1;i<l;i++){
            if(prices[buy]<prices[i]){
                profit = prices[i]-prices[buy];
                max = Math.max(max,profit);
            }else{
                buy = i;
            }
        }
        return max;
    }
}
