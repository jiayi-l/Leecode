/**
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444
*/

#solution
class Solution {
    public int sumSubarrayMins(int[] arr) {
        //find preSmaller num
        int[] preS = new int[arr.length];
        Arrays.fill(preS,-1);
        //find postSmaller num
        int[] postS = new int[arr.length];
        Arrays.fill(postS,arr.length);

        Stack<Integer> pos = new Stack<>();
        
        for(int i=0;i<arr.length;i++){
            while(!pos.isEmpty() && arr[pos.peek()]>arr[i]){
                postS[pos.pop()]=i;
            }
            pos.push(i);
        }
        pos = new Stack<>();
        for(int i=arr.length-1;i>=0;i--){
            while(!pos.isEmpty() && arr[pos.peek()]>=arr[i]){
                preS[pos.pop()]=i;
            }
            pos.push(i);
        }
        long res = 0;
        long M = 1000000007;
        for(int i=0;i<arr.length;i++){
            int left = i - preS[i];
            int right = postS[i]-i;
            res+=arr[i]*left%M*right%M;
            res = res%M;
        }
        return (int)res;
    }
}
