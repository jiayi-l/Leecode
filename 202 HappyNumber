/**
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Input: n = 2
Output: false
*/

# Hashmap
class Solution {
    public int getSum(int n){
        int sum=0;
        while (n > 0) {
                int d = n % 10; //get the remains
                n = n / 10;
                sum += d * d;
            }
        return sum;
    }
    
    public boolean isHappy(int n) {
        List<Integer> set= new ArrayList<>();
        while (n!=1 && !set.contains(n)){
                set.add(n);
                n=getSum(n);
        }

        return n==1;
    }
}

#双指针
class Solution {

     public int getNext(int n) {
        int totalSum = 0;
        while (n > 0) {
            int d = n % 10;
            n = n / 10;
            totalSum += d * d;
        }
        return totalSum;
    }

    public boolean isHappy(int n) {
        int slowRunner = n;
        int fastRunner = getNext(n);
        while (fastRunner != 1 && slowRunner != fastRunner) { //as slow and fast runner move forward with a different speed, if there is a loop of the sum, they will finnaly be the same
            slowRunner = getNext(slowRunner);
            fastRunner = getNext(getNext(fastRunner));//make fastrunner move forward 2 units
        }
        return fastRunner == 1;
    }
}
