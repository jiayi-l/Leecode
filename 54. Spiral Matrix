/**
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

#solution
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int top=0;
        int bottom=row-1;
        int left = 0;
        int right = col-1;
        List<Integer> result = new ArrayList<>();
        if(col ==0 || row==0){
            return result;
        }
        while(left<=right && top<=bottom){
            for(int i=left;i<=right;i++){
                result.add(matrix[top][i]);
            }
            top++;
            if(left<=right){
                for(int j =top; j<=bottom;j++){
                    result.add(matrix[j][right]);
                }
                right--;
            }
            
            if(top<=bottom){
                for(int i =right; i>=left;i--){
                    result.add(matrix[bottom][i]);
                }
                bottom--;
            }
            
            if(right>=left){
                for(int j =bottom; j>=top;j--){
                    result.add(matrix[j][left]);
                }
                left++;
            }
            

        }

        return result;
    }
}
