/**
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
*/

#solutino
class Solution {
    public int search(int[] nums, int target) {
        int l=0;
        int h=nums.length-1;

        while(l<=h){
            int mid = (l+h)/2;
            if(target == nums[mid]){
                return mid;
            }
            if(nums[l]<=nums[mid]){
                if(target>=nums[l] && target < nums[mid]){
                    h = mid-1;
                }else{
                    l = mid+1;
                }
            }else{
                if(target>nums[mid] && target<=nums[h]){
                    l = mid+1;
                }else{
                    h = mid-1;
                }
            }
        }
        return -1;
    }
}

#other - part binary
class Solution {
    public int search(int[] nums, int target) {
        int ind =1;
        while(ind<nums.length && nums[ind]>nums[0]){ind++;}
        int tail = ind-1;
        int l=0;
        int h=0;
        if(target<nums[0]){
            l=tail+1;
            h = nums.length-1;
        }else{
            l=0;
            h=tail;
        }
        while(l<=h){
            int mid = (l+h)/2;
            if(target>nums[mid]){
                l = mid+1;
            }else if(target<nums[mid]){
                h=mid-1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
Console
