/**
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
*/

#solution
class Solution {
    public boolean isValidSudoku(char[][] board) {
        //examine the row and column
        for(int i =0;i<board.length;i++){
            HashSet<Character> row =new HashSet<>();
            HashSet<Character> col =new HashSet<>();
            for(int j=0;j<board.length;j++){
                char r = board[i][j];
                char c = board[j][i];
                if(r!='.' && !row.add(r) || (c!='.' && !col.add(c))){
                    return false;
                }
            }
        }

        //examine the 3x3 block
        for(int i=0;i<board.length;i+=3){
            for(int j=0;j<board.length;j+=3){
                HashSet<Character> block = new HashSet<>();
                for(int x=0;x<3;x++){
                    for(int y=0;y<3;y++){
                        char b = board[i+x][j+y];
                        if(b!='.' && !block.add(b)){
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }
}
