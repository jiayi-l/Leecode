/**
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
*/

#solution
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int l = nums.length;
        int[] answer = new int[l];
        int front =1;
        int end =1;
        int[] f =new int[l];
        int[] e = new int[l]; 
        f[0]=1;
        e[l-1]=1;
        for(int i=0; i<l-1;i++){
            front*=nums[i];
            end*=nums[l-i-1];
            f[i+1]=front;
            e[l-i-2]=end;
        }
        for(int i=0;i<l;i++){
            answer[i]=f[i]*e[i];
        }

        return answer;
    }
}

#moreClean
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int numsLength = nums.length;
        int prefixProduct = 1;
        int suffixProduct = 1;
        int[] result = new int[numsLength];
        for(int i = 0; i < numsLength; i++) {
            result[i] = prefixProduct;
            prefixProduct *= nums[i];
        }
        for(int i = numsLength-1; i >= 0; i--) {
            result[i] *= suffixProduct;
            suffixProduct *= nums[i];
        }
        return result;
    }
}
